diff --git a/CoreFoundation/Base.subproj/CFBase.h b/CoreFoundation/Base.subproj/CFBase.h
index 8a0cbde..8906a27 100644
--- a/CoreFoundation/Base.subproj/CFBase.h
+++ b/CoreFoundation/Base.subproj/CFBase.h
@@ -10,7 +10,11 @@
 #if !defined(__COREFOUNDATION_CFBASE__)
 #define __COREFOUNDATION_CFBASE__ 1
 
+#if __has_include(<CoreFoundation/TargetConditionals.h>)
 #include <CoreFoundation/TargetConditionals.h>
+#else
+#include <TargetConditionals.h>
+#endif
 #include <CoreFoundation/CFAvailability.h>
 
 #if (defined(__CYGWIN32__) || defined(_WIN32)) && !defined(__WIN32__)
@@ -64,7 +68,7 @@
 #include <stdbool.h>
 #endif
 
-#if __BLOCKS__ && (TARGET_OS_OSX || TARGET_OS_IPHONE)
+#if __BLOCKS__ && (TARGET_OS_OSX || TARGET_OS_IPHONE || __HAS_DISPATCH__)
 #include <Block.h>
 #endif
 
diff --git a/CoreFoundation/Base.subproj/CFLocking.h b/CoreFoundation/Base.subproj/CFLocking.h
index 10da46f..5dbac85 100644
--- a/CoreFoundation/Base.subproj/CFLocking.h
+++ b/CoreFoundation/Base.subproj/CFLocking.h
@@ -14,7 +14,11 @@
 #if !defined(__COREFOUNDATION_CFLOCKING_H__)
 #define __COREFOUNDATION_CFLOCKING_H__ 1
 
+#if __has_include(<CoreFoundation/TargetConditionals.h>)
 #include <CoreFoundation/TargetConditionals.h>
+#else
+#include <TargetConditionals.h>
+#endif
 
 #if TARGET_OS_MAC
 
diff --git a/CoreFoundation/Base.subproj/CFPlatform.c b/CoreFoundation/Base.subproj/CFPlatform.c
index bf33297..62faa80 100644
--- a/CoreFoundation/Base.subproj/CFPlatform.c
+++ b/CoreFoundation/Base.subproj/CFPlatform.c
@@ -1501,6 +1501,39 @@ CF_PRIVATE int asprintf(char **ret, const char *format, ...) {
 
 #endif
 
+CF_CROSS_PLATFORM_EXPORT int _CFThreadSetName(_CFThreadRef thread, const char *_Nonnull name) {
+#if TARGET_OS_MAC
+    if (pthread_equal(pthread_self(), thread)) {
+        return pthread_setname_np(name);
+    }
+    return EINVAL;
+#elif TARGET_OS_WIN32
+    // Convert To UTF-16
+    int szLength =
+        MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, name, -1, NULL, 0);
+    if (szLength == 0) {
+        return EINVAL;
+    }
+
+    WCHAR *pszThreadDescription = calloc(szLength + 1, sizeof(WCHAR));
+    MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, name, -1,
+                        pszThreadDescription, szLength);
+
+    // Set Thread Name
+    SetThreadDescription(thread, pszThreadDescription);
+
+    // Free Conversion
+    free(pszThreadDescription);
+
+    return 0;
+#elif TARGET_OS_LINUX
+    return pthread_setname_np(thread, name);
+#elif TARGET_OS_BSD
+    pthread_set_name_np(thread, name);
+    return 0;
+#endif
+}
+
 #if DEPLOYMENT_RUNTIME_SWIFT
 #include <fcntl.h>
 
@@ -1600,39 +1633,6 @@ _CFThreadRef _CFThreadCreate(const _CFThreadAttributes attrs, void *_Nullable (*
 #endif
 }
 
-CF_CROSS_PLATFORM_EXPORT int _CFThreadSetName(_CFThreadRef thread, const char *_Nonnull name) {
-#if TARGET_OS_MAC
-    if (pthread_equal(pthread_self(), thread)) {
-        return pthread_setname_np(name);
-    }
-    return EINVAL;
-#elif TARGET_OS_WIN32
-    // Convert To UTF-16
-    int szLength =
-        MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, name, -1, NULL, 0);
-    if (szLength == 0) {
-        return EINVAL;
-    }
-
-    WCHAR *pszThreadDescription = calloc(szLength + 1, sizeof(WCHAR));
-    MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, name, -1,
-                        pszThreadDescription, szLength);
-
-    // Set Thread Name
-    SetThreadDescription(thread, pszThreadDescription);
-
-    // Free Conversion
-    free(pszThreadDescription);
-
-    return 0;
-#elif TARGET_OS_LINUX
-    return pthread_setname_np(thread, name);
-#elif TARGET_OS_BSD
-    pthread_set_name_np(thread, name);
-    return 0;
-#endif
-}
-
 CF_CROSS_PLATFORM_EXPORT int _CFThreadGetName(char *buf, int length) {
 #if TARGET_OS_MAC
     return pthread_getname_np(pthread_self(), buf, length);
diff --git a/CoreFoundation/Base.subproj/CFPriv.h b/CoreFoundation/Base.subproj/CFPriv.h
index 4c70bca..59f9fcd 100644
--- a/CoreFoundation/Base.subproj/CFPriv.h
+++ b/CoreFoundation/Base.subproj/CFPriv.h
@@ -613,6 +613,7 @@ CF_INLINE struct timespec _CFFileTimeSpecFromAbsoluteTime(CFAbsoluteTime at) {
    return ts;
 }
 
+#if TARGET_OS_MAC || TARGET_OS_OSX || TARGET_OS_IPHONE
 // The 'filtered' function below is preferred to this older one
 CF_EXPORT bool _CFPropertyListCreateSingleValue(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags option, CFStringRef keyPath, CFPropertyListRef *value, CFErrorRef *error);
 
@@ -621,6 +622,13 @@ CF_EXPORT bool _CFPropertyListCreateFiltered(CFAllocatorRef allocator, CFDataRef
 
 // Returns a set of the keys of the top-level dictionary of a plist. Optimized for bplist (though it works with XML too).  Only supports string keys. 
 CF_EXPORT CFSetRef _CFPropertyListCopyTopLevelKeys(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags option, CFErrorRef *outError) API_AVAILABLE(macos(10.13), ios(11.0), watchos(4.0), tvos(11.0));
+#else
+CF_EXPORT Boolean _CFPropertyListCreateSingleValue(CFAllocatorRef allocator, CFDataRef data,CFOptionFlags option, CFStringRef keyPath, CFPropertyListRef *value, CFErrorRef *error);
+
+CF_EXPORT Boolean _CFPropertyListCreateFiltered(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags option, CFSetRef keyPaths, CFPropertyListRef *value, CFErrorRef *error);
+
+CF_EXPORT CFSetRef _CFPropertyListCopyTopLevelKeys(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags option, CFErrorRef *outError);
+#endif
 
 // Returns 'true' if the given 'data' can be determined to be a valid property list. If possible (right now, this means binary plist only) it does this without maintaining the entire object graph for lower overall memory usage.
 CF_EXPORT bool _CFPropertyListValidateData(CFDataRef data, CFTypeID *outTopLevelTypeID) API_AVAILABLE(macos(10.15), ios(13.0), watchos(6.0), tvos(13.0));
diff --git a/CoreFoundation/Base.subproj/CFRuntime.c b/CoreFoundation/Base.subproj/CFRuntime.c
index 07761c0..08320c2 100644
--- a/CoreFoundation/Base.subproj/CFRuntime.c
+++ b/CoreFoundation/Base.subproj/CFRuntime.c
@@ -268,6 +268,7 @@ bool (*__CFObjCIsCollectable)(void *) = NULL;
 // The constant string class reference is set at link time to _NSCFConstantString
 void *__CFConstantStringClassReferencePtr = &_CF_CONSTANT_STRING_SWIFT_CLASS;
 #else
+CFOptionFlags _CFAllocatorHintZeroWhenAllocating = 1;
 #if !__CONSTANT_CFSTRINGS__
 // Compiler uses this symbol name; must match compiler built-in decl, so we use 'int'
 #if TARGET_RT_64_BIT
diff --git a/CoreFoundation/Base.subproj/CoreFoundation.h b/CoreFoundation/Base.subproj/CoreFoundation.h
index c1cee45..3d0107d 100644
--- a/CoreFoundation/Base.subproj/CoreFoundation.h
+++ b/CoreFoundation/Base.subproj/CoreFoundation.h
@@ -87,7 +87,7 @@
 
 #include <CoreFoundation/CFUserNotification.h>
 
-#if !DEPLOYMENT_RUNTIME_SWIFT
+#if !DEPLOYMENT_RUNTIME_SWIFT && !TARGET_OS_LINUX
 #include <CoreFoundation/CFXMLNode.h>
 #include <CoreFoundation/CFXMLParser.h>
 #endif
diff --git a/CoreFoundation/Base.subproj/ForFoundationOnly.h b/CoreFoundation/Base.subproj/ForFoundationOnly.h
index 77b0cb1..f535b9a 100644
--- a/CoreFoundation/Base.subproj/ForFoundationOnly.h
+++ b/CoreFoundation/Base.subproj/ForFoundationOnly.h
@@ -43,6 +43,19 @@ CF_EXTERN_C_END \
 CF_ASSUME_NONNULL_END \
 CF_IMPLICIT_BRIDGING_DISABLED
 
+#if DEPLOYMENT_RUNTIME_C
+_CF_EXPORT_SCOPE_BEGIN
+typedef pthread_key_t _CFThreadSpecificKey;
+typedef pthread_t _CFThreadRef;
+CF_PRIVATE CFOptionFlags _CFAllocatorHintZeroWhenAllocating;
+CF_PRIVATE Boolean __CFAllocatorRespectsHintZeroWhenAllocating(CFAllocatorRef allocator);
+CF_EXPORT Boolean _CFIsMainThread(void);
+CF_EXPORT int _CFThreadSetName(_CFThreadRef thread, const char *_Nonnull name);
+CF_PRIVATE int _CFThreadGetName(char *_Nonnull buf, int length);
+_CF_EXPORT_SCOPE_END
+
+#endif
+
 // NOTE: miscellaneous declarations are at the end
 
 #pragma mark - CFRuntime
diff --git a/CoreFoundation/CMakeLists.txt b/CoreFoundation/CMakeLists.txt
index 103b5d8..7ee44f6 100644
--- a/CoreFoundation/CMakeLists.txt
+++ b/CoreFoundation/CMakeLists.txt
@@ -126,6 +126,7 @@ add_framework(CoreFoundation
                 Base.subproj/CFAsmMacros.h
                 Base.subproj/CFInternal.h
                 Base.subproj/CFKnownLocations.h
+                Base.subproj/CFLocking.h
                 Base.subproj/CFLogUtilities.h
                 Base.subproj/CFPriv.h
                 Base.subproj/CFOverflow.h
@@ -189,29 +190,7 @@ add_framework(CoreFoundation
                 URL.subproj/CFURLPriv.h
                 URL.subproj/CFURLSessionInterface.h
               PUBLIC_HEADERS
-                # FIXME: PrivateHeaders referenced by public headers
-                Base.subproj/CFKnownLocations.h
-                Base.subproj/CFLocking.h
                 Base.subproj/CFLogUtilities.h
-                Base.subproj/CFPriv.h
-                Base.subproj/CFRuntime.h
-                Base.subproj/ForFoundationOnly.h
-                Base.subproj/ForSwiftFoundationOnly.h
-                Locale.subproj/CFCalendar_Internal.h
-                Locale.subproj/CFDateComponents.h
-                Locale.subproj/CFDateInterval.h
-                Locale.subproj/CFLocaleInternal.h
-                PlugIn.subproj/CFBundlePriv.h
-                Stream.subproj/CFStreamPriv.h
-                String.subproj/CFCharacterSetPriv.h
-                String.subproj/CFRegularExpression.h
-                String.subproj/CFRunArray.h
-                StringEncodings.subproj/CFStringEncodingConverter.h
-                StringEncodings.subproj/CFStringEncodingConverterExt.h
-                URL.subproj/CFURLPriv.h
-                URL.subproj/CFURLSessionInterface.h
-                Locale.subproj/CFDateIntervalFormatter.h
-
                 # AppServices
                 AppServices.subproj/CFNotificationCenter.h
                 AppServices.subproj/CFUserNotification.h
@@ -221,8 +200,9 @@ add_framework(CoreFoundation
                 Base.subproj/CFByteOrder.h
                 Base.subproj/CFUUID.h
                 Base.subproj/CFUtilities.h
-                Base.subproj/SwiftRuntime/CoreFoundation.h
+                #Base.subproj/SwiftRuntime/CoreFoundation.h
                 Base.subproj/SwiftRuntime/TargetConditionals.h
+                Base.subproj/CoreFoundation.h
                 # Collections
                 Collections.subproj/CFArray.h
                 Collections.subproj/CFBag.h
@@ -252,7 +232,7 @@ add_framework(CoreFoundation
                 # Preferences
                 Preferences.subproj/CFPreferences.h
                 # RunLoop
-                RunLoop.subproj/CFMachPort.h
+                #RunLoop.subproj/CFMachPort.h
                 RunLoop.subproj/CFMessagePort.h
                 RunLoop.subproj/CFRunLoop.h
                 RunLoop.subproj/CFSocket.h
@@ -404,45 +384,47 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
   endif()
 endif()
 
-add_framework(CFURLSessionInterface
-                ${FRAMEWORK_LIBRARY_TYPE}
-              FRAMEWORK_DIRECTORY
-                CFURLSessionInterface_FRAMEWORK_DIRECTORY
-              MODULE_MAP
-                URL.subproj/module.modulemap
-              PRIVATE_HEADERS
-                URL.subproj/CFURLSessionInterface.h
-              PUBLIC_HEADERS
-                URL.subproj/CFURLSessionInterface.h
-              SOURCES
-                URL.subproj/CFURLSessionInterface.c)
-add_dependencies(CFURLSessionInterface CoreFoundation)
-if(CMAKE_SYSTEM_NAME STREQUAL Windows)
-  target_compile_definitions(CFURLSessionInterface
-                             PRIVATE
-                               CURL_STATICLIB)
-endif()
-if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
-  target_link_libraries(CFURLSessionInterface PRIVATE
-    CURL::libcurl)
-endif()
+if(CF_DEPLOYMENT_SWIFT)
+  add_framework(CFURLSessionInterface
+                  ${FRAMEWORK_LIBRARY_TYPE}
+                FRAMEWORK_DIRECTORY
+                  CFURLSessionInterface_FRAMEWORK_DIRECTORY
+                MODULE_MAP
+                  URL.subproj/module.modulemap
+                PRIVATE_HEADERS
+                  URL.subproj/CFURLSessionInterface.h
+                PUBLIC_HEADERS
+                  URL.subproj/CFURLSessionInterface.h
+                SOURCES
+                  URL.subproj/CFURLSessionInterface.c)
+  add_dependencies(CFURLSessionInterface CoreFoundation)
+  if(CMAKE_SYSTEM_NAME STREQUAL Windows)
+    target_compile_definitions(CFURLSessionInterface
+                               PRIVATE
+                                 CURL_STATICLIB)
+  endif()
+  if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
+    target_link_libraries(CFURLSessionInterface PRIVATE
+      CURL::libcurl)
+  endif()
 
-add_framework(CFXMLInterface
-                ${FRAMEWORK_LIBRARY_TYPE}
-              FRAMEWORK_DIRECTORY
-                CFXMLInterface_FRAMEWORK_DIRECTORY
-              MODULE_MAP
-                Parsing.subproj/module.modulemap
-              PRIVATE_HEADERS
-                Parsing.subproj/CFXMLInterface.h
-              PUBLIC_HEADERS
-                Parsing.subproj/CFXMLInterface.h
-              SOURCES
-                Parsing.subproj/CFXMLInterface.c)
-add_dependencies(CFXMLInterface CoreFoundation)
-if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
-  target_link_libraries(CFXMLInterface PRIVATE
-    LibXml2::LibXml2)
+  add_framework(CFXMLInterface
+                  ${FRAMEWORK_LIBRARY_TYPE}
+                FRAMEWORK_DIRECTORY
+                  CFXMLInterface_FRAMEWORK_DIRECTORY
+                MODULE_MAP
+                  Parsing.subproj/module.modulemap
+                PRIVATE_HEADERS
+                  Parsing.subproj/CFXMLInterface.h
+                PUBLIC_HEADERS
+                  Parsing.subproj/CFXMLInterface.h
+                SOURCES
+                  Parsing.subproj/CFXMLInterface.c)
+  add_dependencies(CFXMLInterface CoreFoundation)
+  if(NOT CMAKE_SYSTEM_NAME STREQUAL Darwin)
+    target_link_libraries(CFXMLInterface PRIVATE
+      LibXml2::LibXml2)
+  endif()
 endif()
 
 if(CMAKE_SYSTEM_NAME STREQUAL Windows)
@@ -487,6 +469,7 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND NOT CMAKE_SYSTEM_NAME STREQUAL Dar
   target_link_libraries(CoreFoundation
                         PRIVATE
                           m)
+if(CF_DEPLOYMENT_SWIFT)
   target_link_libraries(CFURLSessionInterface
                         PRIVATE
                           m)
@@ -494,36 +477,48 @@ if(NOT CMAKE_SYSTEM_NAME STREQUAL Windows AND NOT CMAKE_SYSTEM_NAME STREQUAL Dar
                         PRIVATE
                           m)
 endif()
+endif()
 target_link_libraries(CoreFoundation
                       PRIVATE
                         dispatch)
+if(CF_DEPLOYMENT_SWIFT)
 target_link_libraries(CFURLSessionInterface
                       PRIVATE
                         dispatch)
 target_link_libraries(CFXMLInterface
                       PRIVATE
                         dispatch)
+endif()
 if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
   target_link_libraries(CoreFoundation
                         PRIVATE
                           icucore)
+if(CF_DEPLOYMENT_SWIFT)
   target_link_libraries(CFURLSessionInterface
                         PRIVATE
                           icucore)
   target_link_libraries(CFXMLInterface
                         PRIVATE
                           icucore)
+endif()
   set_target_properties(CoreFoundation
                         PROPERTIES LINK_FLAGS
                           -Xlinker;-alias_list;-Xlinker;Base.subproj/DarwinSymbolAliases;-twolevel_namespace;-sectcreate;__UNICODE;__csbitmaps;CharacterSets/CFCharacterSetBitmaps.bitmap;-sectcreate;__UNICODE;__properties;CharacterSets/CFUniCharPropertyDatabase.data;-sectcreate;__UNICODE;__data;CharacterSets/CFUnicodeData-L.mapping;-segprot;__UNICODE;r;r)
 endif()
 
+if(CF_DEPLOYMENT_SWIFT)
 install(TARGETS
           CoreFoundation
           CFURLSessionInterface
           CFXMLInterface
         DESTINATION
           "${CMAKE_INSTALL_FULL_LIBDIR}")
+else()
+install(TARGETS
+          CoreFoundation
+        DESTINATION
+          "${CMAKE_INSTALL_FULL_LIBDIR}")
+endif()
 
 # Needed to avoid double slash "//" when CMAKE_INSTALL_PREFIX set to "/" and DESTDIR used to relocate whole installation.
 # Double slash raise CMake error "file called with network path DESTINATION //System/Library/Frameworks".
@@ -532,6 +527,6 @@ string(REGEX REPLACE "/$" "" CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
 install(DIRECTORY
           ${CoreFoundation_FRAMEWORK_DIRECTORY}
         DESTINATION
-          ${CMAKE_INSTALL_PREFIX}/System/Library/Frameworks
+          ${CMAKE_INSTALL_PREFIX}/Frameworks
         USE_SOURCE_PERMISSIONS
         PATTERN PrivateHeaders EXCLUDE)
diff --git a/CoreFoundation/Collections.subproj/CFDictionary.c b/CoreFoundation/Collections.subproj/CFDictionary.c
index 11b4976..9ded924 100644
--- a/CoreFoundation/Collections.subproj/CFDictionary.c
+++ b/CoreFoundation/Collections.subproj/CFDictionary.c
@@ -72,7 +72,7 @@ static CFBasicHashRef __CFDictionaryCreateGeneric(CFAllocatorRef allocator, cons
 }
 
 CF_PRIVATE CFDictionaryRef __CFDictionaryCreateTransfer(CFAllocatorRef allocator, void const **klist, void const **vlist, CFIndex numValues) {
-#if !DEPLOYMENT_RUNTIME_SWIFT
+#if !DEPLOYMENT_RUNTIME_SWIFT && !TARGET_OS_LINUX
     CF_PRIVATE CFDictionaryRef __NSCFDictionaryCreateTransfer(CFAllocatorRef allocator, const id *klist, const id *vlist, CFIndex numValues);
     CFDictionaryRef nsResult = __NSCFDictionaryCreateTransfer(allocator, (const id *)klist, (const id *)vlist, numValues);
     if (nsResult) {
@@ -109,7 +109,7 @@ CF_PRIVATE CFDictionaryRef __CFDictionaryCreateTransfer(CFAllocatorRef allocator
 }
 
 CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, void const **klist, void const **vlist, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks) {
-#if !DEPLOYMENT_RUNTIME_SWIFT
+#if !DEPLOYMENT_RUNTIME_SWIFT && !TARGET_OS_LINUX
     CF_PRIVATE CFDictionaryRef __NSCFDictionaryCreate(CFAllocatorRef allocator, void const **klist, void const **vlist, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
     CFDictionaryRef nsResult = __NSCFDictionaryCreate(allocator, klist, vlist, numValues, keyCallBacks, valueCallBacks);
     if (nsResult) {
@@ -131,7 +131,7 @@ CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, void const **klist,
 }
 
 CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks) {
-#if !DEPLOYMENT_RUNTIME_SWIFT
+#if !DEPLOYMENT_RUNTIME_SWIFT && !TARGET_OS_LINUX
     CF_PRIVATE CFMutableDictionaryRef __NSCFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks);
     CFMutableDictionaryRef nsResult = __NSCFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
     if (nsResult) {
diff --git a/CoreFoundation/Locale.subproj/CFDateIntervalFormatter.c b/CoreFoundation/Locale.subproj/CFDateIntervalFormatter.c
index a6d75ef..09bf027 100644
--- a/CoreFoundation/Locale.subproj/CFDateIntervalFormatter.c
+++ b/CoreFoundation/Locale.subproj/CFDateIntervalFormatter.c
@@ -11,6 +11,7 @@
 #include <CoreFoundation/CFRuntime.h>
 #include "CFInternal.h"
 #include "CFRuntime_Internal.h"
+#include "CFCalendar_Internal.h"
 
 #include <CoreFoundation/CFCalendar.h>
 #include <CoreFoundation/CFDate.h>
diff --git a/CoreFoundation/Locale.subproj/CFLocale.c b/CoreFoundation/Locale.subproj/CFLocale.c
index a0a91f0..e785704 100644
--- a/CoreFoundation/Locale.subproj/CFLocale.c
+++ b/CoreFoundation/Locale.subproj/CFLocale.c
@@ -539,7 +539,6 @@ CFStringRef _CFLocaleCreateLocaleIdentiferByReplacingLanguageCodeAndScriptCode(C
 
 #if TARGET_OS_MAC || TARGET_OS_WIN32
 static CFArrayRef _CFLocaleCopyPreferredLanguagesFromPrefs(CFArrayRef languagesArray);
-#endif
 
 /// Creates a new locale identifier by identifying the most preferred localization (using `availableLocalizations` and `preferredLanguages`) and then creating a locale based on the most preferred localization, while retaining any relevant attributes from `preferredLocaleID`, e.g. if `availableLocalizations` is `[ "en", "fr", "de" ]`, `preferredLanguages` is `[ "ar-AE", "en-AE" ]`, `preferredLocaleID` is `ar_AE@numbers=arab;calendar=islamic-civil`, it will return `en_AE@calendar=islamic-civil`, i.e. the language will be matched to `en` since that’s the only available localization that matches, `calendar` will be retained since it’s language-agnostic, but `numbers` will be discarded because the `arab` numbering system is not valid for `en`.
 static CFStringRef _CFLocaleCreateLocaleIdentifierForAvailableLocalizations(CFArrayRef availableLocalizations, CFArrayRef preferredLanguages, CFStringRef preferredLocaleID, CFArrayRef *outCanonicalizedPreferredLanguages) {
@@ -588,6 +587,7 @@ static CFStringRef _CFLocaleCreateLocaleIdentifierForAvailableLocalizations(CFAr
     }
     return result;
 }
+#endif
 
 static CFLocaleRef _CFLocaleCopyCurrentGuts(CFStringRef name, Boolean useCache, CFDictionaryRef overridePrefs, Boolean disableBundleMatching) {
     /*
diff --git a/CoreFoundation/RunLoop.subproj/CFRunLoop.c b/CoreFoundation/RunLoop.subproj/CFRunLoop.c
index 3855245..cccd752 100644
--- a/CoreFoundation/RunLoop.subproj/CFRunLoop.c
+++ b/CoreFoundation/RunLoop.subproj/CFRunLoop.c
@@ -62,7 +62,9 @@ extern bool _dispatch_runloop_root_queue_perform_4CF(dispatch_queue_t queue);
 #if TARGET_OS_MAC
 typedef mach_port_t dispatch_runloop_handle_t;
 #elif defined(__linux__) || defined(__FreeBSD__)
+#if !defined(__HAS_DISPATCH__)
 typedef int dispatch_runloop_handle_t;
+#endif
 #elif TARGET_OS_WIN32
 typedef HANDLE dispatch_runloop_handle_t;
 #endif
diff --git a/CoreFoundation/String.subproj/CFString.c b/CoreFoundation/String.subproj/CFString.c
index a50c17a..ca5085e 100644
--- a/CoreFoundation/String.subproj/CFString.c
+++ b/CoreFoundation/String.subproj/CFString.c
@@ -27,6 +27,7 @@
 #include "CFString_Internal.h"
 #include "CFRuntime_Internal.h"
 #include <assert.h>
+int UCHAR_EXTENDED_PICTOGRAPHIC=64;
 #include <unicode/uchar.h>
 #if TARGET_OS_MAC || TARGET_OS_WIN32 || TARGET_OS_LINUX || TARGET_OS_BSD
 #include "CFLocaleInternal.h"
